name: Create Release for Android

on:
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: app

env:
  JAVA_VERSION: 12.x

jobs:
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set Flutter version
        run: |
          FLUTTER_VERSION=$(cat .fvm/fvm_config.json | grep flutterSdkVersion | sed 's/"flutterSdkVersion": "\(.*\)"/\1/' | sed 's/[[:space:]]//g')
          echo "FLUTTER_VERSION=$FLUTTER_VERSION" >> $GITHUB_ENV
          echo "Building with Flutter version: $FLUTTER_VERSION"

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter config --no-analytics && flutter pub get

      - name: Build APK
        run: flutter build apk

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: built-apk
          path: |
            ./app/build/app/outputs/
          if-no-files-found: error

  build-aab:
    name: Build App Bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set Flutter version
        run: |
          FLUTTER_VERSION=$(cat .fvm/fvm_config.json | grep flutterSdkVersion | sed 's/"flutterSdkVersion": "\(.*\)"/\1/' | sed 's/[[:space:]]//g')
          echo "FLUTTER_VERSION=$FLUTTER_VERSION" >> $GITHUB_ENV
          echo "Building with Flutter version $FLUTTER_VERSION"
          echo "Building with Flutter version $FLUTTER_VERSION"

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION}}
          channel: 'stable'

      - name: Set KEY_STORE_FILE and create keystore file
        env:
          CONTEXT_TEMP_DIR: ${{ runner.temp }}
          KEY_STORE_BASE64: ${{ secrets.KEY_STORE_BASE64 }}
        run: |
          KEY_STORE_FILE="$CONTEXT_TEMP_DIR/release.keystore"
          echo "KEY_STORE_FILE=$KEY_STORE_FILE" >> $GITHUB_ENV
          echo "$KEY_STORE_BASE64" | base64 -d > "$KEY_STORE_FILE"

      - name: Install dependencies
        run: flutter config --no-analytics && flutter pub get

      - name: Build App Bundle
        run: flutter build appbundle --target-platform android-arm,android-arm64,android-x64
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: built-aab
          path: |
            ./app/build/app/outputs/
          if-no-files-found: error

  release-github:
    name: Create Release on GitHub
    needs: [build-apk, build-aab]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get version from pubspec.yaml
        run: |
          RELEASE_VERSION="$(cat pubspec.yaml | sed -nr 's/version: (.*)\+.*$/\1/p')+$GITHUB_RUN_NUMBER"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "Creating release version: $RELEASE_VERSION"

      - name: Download artifact made by `build-apk`
        id: download-apk
        uses: actions/download-artifact@v2
        with:
          name: built-apk

      - name: Download artifact made by `build-aab`
        id: download-aab
        uses: actions/download-artifact@v2
        with:
          name: built-aab

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset apk
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.download-apk.outputs.download-path }}/apk/release/app-release.apk
          asset_name: mnmn-app.${{ env.RELEASE_VERSION }}.release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Release Asset aab
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.download-aab.outputs.download-path }}/bundle/release/app-release.aab
          asset_name: mnmn-app.${{ env.RELEASE_VERSION }}.release.aab
          asset_content_type: application/vnd.android.package-archive
